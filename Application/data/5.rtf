{\rtf1\ansi\ansicpg1252\cocoartf2512
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 GillSans;\f1\fnil\fcharset0 HelveticaNeue-Bold;\f2\fnil\fcharset0 HelveticaNeue;
\f3\fnil\fcharset0 Consolas;\f4\fnil\fcharset0 Consolas-Bold;\f5\fnil\fcharset0 HelveticaNeue-Italic;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue233;\red27\green31\blue34;\red255\green255\blue255;
\red10\green77\blue204;\red21\green23\blue26;\red244\green246\blue249;\red7\green68\blue184;\red203\green35\blue57;
\red91\green40\blue180;\red6\green33\blue79;\red87\green96\blue106;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c93333;\cssrgb\c14118\c16078\c18039;\cssrgb\c100000\c100000\c100000;
\cssrgb\c1176\c40000\c83922;\cssrgb\c10588\c12157\c13725\c5098;\cssrgb\c96471\c97255\c98039;\cssrgb\c0\c36078\c77255;\cssrgb\c84314\c22745\c28627;
\cssrgb\c43529\c25882\c75686;\cssrgb\c1176\c18431\c38431;\cssrgb\c41569\c45098\c49020;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid201\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid3}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}}
\margl1440\margr1440\vieww9000\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs128 \cf2 \expnd0\expndtw0\kerning0
\ul \ulc2 \
apns4erl\
\pard\pardeftab720\partightenfactor0

\f1\b\fs48 \cf3 \cb4 \ulnone \
\pard\pardeftab720\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://camo.githubusercontent.com/d78d100e5e6624221243114cfa64472f6023de42/68747470733a2f2f6d656469612e67697068792e636f6d2f6d656469612f755a515030505230426d6b47412f67697068792e676966"}}{\fldrslt 
\f2\b0\fs32 \cf5 \
}}\pard\pardeftab720\sa320\partightenfactor0

\f2\b0\fs32 \cf3 This lib is intended to allow you to write an APNs provider for\'a0{\field{\*\fldinst{HYPERLINK "https://developer.apple.com/library/content/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/APNSOverview.html"}}{\fldrslt \cf5 Apple Push Notificaion services (APNs)}}\'a0over HTTP2 in Erlang.\
Copyright (c) 2017 Erlang Solutions Ltd.\'a0{\field{\*\fldinst{HYPERLINK "mailto:support@inaka.net"}}{\fldrslt \cf5 support@inaka.net}}, released under the Apache 2 license\
You can find the v1\'a0{\field{\*\fldinst{HYPERLINK "https://github.com/inaka/apns4erl/releases/tag/1.0.6-final"}}{\fldrslt \cf5 here}}?\
\pard\pardeftab720\sa320\partightenfactor0

\f1\b \cf3 Note:
\f2\b0 \cf3 \'a0
\f3\fs27\fsmilli13600 \cb6 Apns4erl v2
\f2\fs32 \cb4 \'a0is still under development. Currently it supports push notifications with certificate and authentication token.\
\pard\pardeftab720\sl480\partightenfactor0

\f1\b\fs48 \cf5 \cb1 \
\pard\pardeftab720\sl600\sa320\partightenfactor0
\cf3 \cb4 Contact Us\
\pard\pardeftab720\sa320\partightenfactor0

\f2\b0\fs32 \cf3 If you find any\'a0
\f1\b \cf3 bugs
\f2\b0 \cf3 \'a0or have a\'a0
\f1\b \cf3 problem
\f2\b0 \cf3 \'a0while using Apns4erl, please\'a0{\field{\*\fldinst{HYPERLINK "https://github.com/inaka/apns4erl/issues/new"}}{\fldrslt \cf5 open an issue}}\'a0in this repo (or a pull request :)).\
\pard\pardeftab720\sl360\partightenfactor0

\f1\b\fs36 \cf5 \cb1 \
\pard\pardeftab720\sl440\sa320\partightenfactor0
\cf3 \cb4 Requirements\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls1\ilvl0
\f2\b0\fs32 \cf3 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
You must have installed an updated Openssl version or, at least, be sure it supports TLS 1.2+. New APNs server only supports connections over TLS 1.2+.\cb1 \
\ls1\ilvl0\cb4 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Erlang R19+\cb1 \
\pard\pardeftab720\sl360\partightenfactor0

\f1\b\fs36 \cf5 \
\pard\pardeftab720\sl440\sa320\partightenfactor0
\cf3 \cb4 Important Links\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls2\ilvl0
\f2\b0\fs32 \cf5 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}{\field{\*\fldinst{HYPERLINK "https://github.com/inaka/apns4erl/blob/master/examples/apns_pool/README.md"}}{\fldrslt \expnd0\expndtw0\kerning0
Pool of connections Example}}\cf3 \cb1 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\sl360\partightenfactor0

\f1\b\fs36 \cf5 \
\pard\pardeftab720\sl440\sa320\partightenfactor0
\cf3 \cb4 How to use it?\
\pard\pardeftab720\sa320\partightenfactor0

\f2\b0\fs32 \cf3 First we have to fill our\'a0
\f3\fs27\fsmilli13600 \cb6 config
\f2\fs32 \cb4 \'a0data. There are two ways for do this, one is filling a\'a0
\f3\fs27\fsmilli13600 \cb6 config
\f2\fs32 \cb4 \'a0file. This is an example you can find at\'a0
\f3\fs27\fsmilli13600 \cb6 test/test.config
\f2\fs32 \cb4 :\
\pard\pardeftab720\sl380\partightenfactor0

\f3\fs27\fsmilli13600 \cf3 \cb7 \{\
  apns,\
  [ \{apple_host,       "api.development.push.apple.com"\}\
  , \{apple_port,       443\}\
  , \{certfile,         "priv/apns-dev-cert.pem"\}\
  , \{keyfile,          "priv/apns-dev-key-noenc.pem"\}\
  , \{token_keyfile,    "priv/APNsAuthKey_KEYID12345.p8"\}\
  , \{timeout,          10000\}\
\
  %% APNs Headers\
\
  , \{apns_id,          undefined\}\
  , \{apns_expiration,  0\}\
  , \{apns_priority,    10\}\
  , \{apns_topic,       "com.example.myapp"\}\
  , \{apns_collapse_id, undefined\}\
  , \{apns_push_type,   "alert"\}\
\
  %% Feedback\
  , \{feedback_host,    "feedback.push.apple.com"\}\
  , \{feedback_port,    2195\}\
  ]\
  ]\
\}\
\pard\pardeftab720\sa320\partightenfactor0

\f2\fs32 \cf3 \cb4 The other way is send all that info as a parameter to\'a0
\f3\fs27\fsmilli13600 \cb6 apns:connect/1
\f2\fs32 \cb4 \'a0function encapsulated in a\'a0
\f3\fs27\fsmilli13600 \cb6 apns_connection:connection()
\f2\fs32 \cb4 \'a0structure:\
\pard\pardeftab720\sl380\partightenfactor0

\f3\fs27\fsmilli13600 \cf3 \cb7 #\{ \cf8 \cb7 name\cf3 \cb7        :\cf9 \cb7 =\cf3 \cb7  \cf10 \cb7 name\cf3 \cb7 ()\
 , \cf8 \cb7 apple_host\cf3 \cb7  :\cf9 \cb7 =\cf3 \cb7  \cf10 \cb7 host\cf3 \cb7 ()\
 , \cf8 \cb7 apple_port\cf3 \cb7  :\cf9 \cb7 =\cf3 \cb7  \cf10 \cb7 inet\cf3 \cb7 :\cf10 \cb7 port_number\cf3 \cb7 ()\
 , \cf8 \cb7 certfile\cf3 \cb7    \cf9 \cb7 =>\cf3 \cb7  \cf10 \cb7 path\cf3 \cb7 ()\
 , \cf8 \cb7 keyfile\cf3 \cb7     \cf9 \cb7 =>\cf3 \cb7  \cf10 \cb7 path\cf3 \cb7 ()\
 , \cf8 \cb7 timeout\cf3 \cb7     \cf9 \cb7 =>\cf3 \cb7  \cf10 \cb7 integer\cf3 \cb7 ()\
 , \cf8 \cb7 type\cf3 \cb7        :\cf9 \cb7 =\cf3 \cb7  \cf10 \cb7 type\cf3 \cb7 ()\
 \}.\
\pard\pardeftab720\sa320\partightenfactor0

\f2\fs32 \cf3 \cb4 APNs allows two connection types, one is using\'a0
\f3\fs27\fsmilli13600 \cb6 Provider Certificates
\f2\fs32 \cb4 . The first certificate option is to supply cert paths in\'a0
\f3\fs27\fsmilli13600 \cb6 certfile
\f2\fs32 \cb4 \'a0and\'a0
\f3\fs27\fsmilli13600 \cb6 keyfile
\f2\fs32 \cb4 . Alternatively, you can supply a cert binary in\'a0
\f3\fs27\fsmilli13600 \cb6 certdata
\f2\fs32 \cb4 \'a0and a\'a0
\f3\fs27\fsmilli13600 \cb6 keydata()
\f2\fs32 \cb4 -type tuple (see:\'a0{\field{\*\fldinst{HYPERLINK "https://github.com/inaka/apns4erl/blob/master/src/apns_connection.erl#L64"}}{\fldrslt \cf5 https://github.com/inaka/apns4erl/blob/master/src/apns_connection.erl#L64}}) in\'a0
\f3\fs27\fsmilli13600 \cb6 keydata
\f2\fs32 \cb4 . Certs are the\'a0
\f3\fs27\fsmilli13600 \cb6 Provider Certificates
\f2\fs32 \cb4 \'a0and the keys are the\'a0
\f3\fs27\fsmilli13600 \cb6 Private Key
\f2\fs32 \cb4 \'a0both provided by Apple. We need them in\'a0
\f3\fs27\fsmilli13600 \cb6 .pem
\f2\fs32 \cb4 \'a0format, here is an example of how to convert them, check the\'a0{\field{\*\fldinst{HYPERLINK "https://blog.serverdensity.com/how-to-build-an-apple-push-notification-provider-server-tutorial/"}}{\fldrslt \cf5 certificates}}\'a0section.\
The other way to connect against APNs is using\'a0
\f3\fs27\fsmilli13600 \cb6 Provider Authentication Tokens
\f2\fs32 \cb4 , for this choice you must fill the field\'a0
\f3\fs27\fsmilli13600 \cb6 token_keyfile
\f2\fs32 \cb4 . This is a path to the Authentication Key provided by Apple. This is in\'a0
\f3\fs27\fsmilli13600 \cb6 .p8
\f2\fs32 \cb4 \'a0format and it doesn't need conversion.\
This\'a0
\f3\fs27\fsmilli13600 \cb6 key
\f2\fs32 \cb4 \'a0will be needed in order to generate a token which will be used every time we try to push a notification. In connection's time it is not needed.\
\pard\pardeftab720\sl360\partightenfactor0

\f1\b\fs36 \cf5 \cb1 \
\pard\pardeftab720\sl440\sa320\partightenfactor0
\cf3 \cb4 Run\
\pard\pardeftab720\sa320\partightenfactor0

\f3\b0\fs27\fsmilli13600 \cf3 \cb6 apns4erl
\f2\fs32 \cb4 \'a0can be included as a dependency and started from\'a0
\f3\fs27\fsmilli13600 \cb6 yourapp.app.src
\f2\fs32 \cb4 . You also can run it on the shell for testing.\
\pard\pardeftab720\sl380\partightenfactor0

\f3\fs27\fsmilli13600 \cf3 \cb7 > rebar3 compile\
> erl -pa _build/default/lib/*/ebin -config test/test.config\
\pard\pardeftab720\sa320\partightenfactor0

\f2\fs32 \cf3 \cb4 Don't forget your config file if you want to use\'a0
\f3\fs27\fsmilli13600 \cb6 apns:connect/2
\f2\fs32 \cb4 .\
\pard\pardeftab720\sl380\partightenfactor0

\f3\fs27\fsmilli13600 \cf8 \cb7 1\cf9 >\cf3 \cb7  \cf10 \cb7 apns\cf3 \cb7 :\cf10 \cb7 start\cf3 \cb7 ().\
\cf8 \cb7 ok\cf3 \cb7 \
\pard\pardeftab720\sl360\partightenfactor0

\f1\b\fs36 \cf5 \cb1 \
\pard\pardeftab720\sl440\sa320\partightenfactor0
\cf3 \cb4 Create connections\
\pard\pardeftab720\sa320\partightenfactor0

\f2\b0\fs32 \cf3 After running\'a0
\f3\fs27\fsmilli13600 \cb6 apns4erl
\f2\fs32 \cb4 \'a0app we can start creating connections. As we mentioned before there are two types of connections. Both are created using the functions\'a0
\f3\fs27\fsmilli13600 \cb6 apns:connect/1
\f2\fs32 \cb4 \'a0and\'a0
\f3\fs27\fsmilli13600 \cb6 apns:connect/2
\f2\fs32 \cb4 .\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa320\partightenfactor0
\ls3\ilvl0
\f3\fs27\fsmilli13600 \cf3 \cb6 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
apns:connect/1
\f2\fs32 \cb4 : This function accepts as a parameter an\'a0
\f3\fs27\fsmilli13600 \cb6 apns_connection:connection()
\f2\fs32 \cb4 \'a0structure.\cb1 \uc0\u8232 
\f3\fs27\fsmilli13600 \cb7 #\{ \cf8 name\cf3        :\cf9 =\cf3  \cf10 name\cf3 ()\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl380\partightenfactor0
\ls3\ilvl0\cf3 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
 , \cf8 apple_host\cf3  :\cf9 =\cf3  \cf10 host\cf3 ()\
\ls3\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
 , \cf8 apple_port\cf3  :\cf9 =\cf3  \cf10 inet\cf3 :\cf10 port_number\cf3 ()\
\ls3\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
 , \cf8 certdata\cf3    \cf9 =>\cf3  \cf10 binary\cf3 ()\
\ls3\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
 , \cf8 certfile\cf3    \cf9 =>\cf3  \cf10 path\cf3 ()\
\ls3\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
 , \cf8 keydata\cf3     \cf9 =>\cf3  \cf10 keydata\cf3 ()\
\ls3\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
 , \cf8 keyfile\cf3     \cf9 =>\cf3  \cf10 path\cf3 ()\
\ls3\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
 , \cf8 timeout\cf3     \cf9 =>\cf3  \cf10 integer\cf3 ()\
\ls3\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
 , \cf8 type\cf3        :\cf9 =\cf3  \cf10 type\cf3 ()\
\ls3\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
 \}.\uc0\u8232 
\f2\fs32 \cb1 \uc0\u8232 \cb4 where the\'a0
\f3\fs27\fsmilli13600 \cb6 type
\f2\fs32 \cb4 \'a0field indicates if is\'a0
\f3\fs27\fsmilli13600 \cb6 certdata
\f2\fs32 \cb4 ,\'a0
\f3\fs27\fsmilli13600 \cb6 cert
\f2\fs32 \cb4 , or\'a0
\f3\fs27\fsmilli13600 \cb6 token
\f2\fs32 \cb4 .\cb1 \uc0\u8232 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa320\partightenfactor0
\ls3\ilvl0
\f3\fs27\fsmilli13600 \cf3 \cb6 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
apns:connect/2
\f2\fs32 \cb4 : The first argument is the type and the second one is the connection's name. In order to use it successfully we have to fill the\'a0
\f3\fs27\fsmilli13600 \cb6 config
\f2\fs32 \cb4 \'a0file before, as explained in\'a0
\f3\fs27\fsmilli13600 \cb6 how to use it?
\f2\fs32 \cb4 \'a0section.\cb1 \uc0\u8232 \
\pard\pardeftab720\sa320\partightenfactor0
\cf3 \cb4 Example:\
\pard\pardeftab720\sl380\partightenfactor0

\f3\fs27\fsmilli13600 \cf8 \cb7 1\cf9 >\cf3 \cb7  \cf10 \cb7 apns\cf3 \cb7 :\cf10 \cb7 connect\cf3 \cb7 (\cf8 \cb7 cert\cf3 \cb7 , \cf8 \cb7 my_first_connection\cf3 \cb7 ).\
\{\cf8 \cb7 ok\cf3 \cb7 ,\cf9 \cb7 <\cf8 0.87\cf3 \cb7 .\cf8 \cb7 0\cf9 >\cf3 \cb7 \}\
\cf8 \cb7 2\cf9 >\cf3 \cb7  \cf10 \cb7 apns\cf3 \cb7 :\cf10 \cb7 connect\cf3 \cb7 (#\{\cf8 \cb7 name\cf3 \cb7  \cf9 \cb7 =>\cf3 \cb7  \cf8 \cb7 another_cert\cf3 \cb7 , \cf8 \cb7 apple_host\cf3 \cb7  \cf9 \cb7 =>\cf3 \cb7  \cf11 \cb7 "api.push.apple.com"\cf3 \cb7 , \cf8 \cb7 apple_port\cf3 \cb7  \cf9 \cb7 =>\cf3 \cb7  \cf8 \cb7 443\cf3 \cb7 ,\
\cf8 \cb7 certfile\cf3 \cb7  \cf9 \cb7 =>\cf3 \cb7  \cf11 \cb7 "priv/cert.pem"\cf3 \cb7 , \cf8 \cb7 keyfile\cf3 \cb7  \cf9 \cb7 =>\cf3 \cb7  \cf11 \cb7 "priv/key.pem"\cf3 \cb7 , \cf8 \cb7 type\cf3 \cb7  \cf9 \cb7 =>\cf3 \cb7  \cf8 \cb7 cert\cf3 \cb7 \}).\
\cf8 \cb7 3\cf9 >\cf3 \cb7  \cf10 \cb7 apns\cf3 \cb7 :\cf10 \cb7 connect\cf3 \cb7 (\cf8 \cb7 token\cf3 \cb7 , \cf8 \cb7 my_second_connection\cf3 \cb7 ).\
\{\cf8 \cb7 ok\cf3 \cb7 ,\cf9 \cb7 <\cf8 0.95\cf3 \cb7 .\cf8 \cb7 0\cf9 >\cf3 \cb7 \}\
\pard\pardeftab720\sa320\partightenfactor0

\f2\fs32 \cf3 \cb4 Note\'a0
\f3\fs27\fsmilli13600 \cb6 cert
\f2\fs32 \cb4 \'a0and\'a0
\f3\fs27\fsmilli13600 \cb6 token
\f2\fs32 \cb4 \'a0define the type we want.\
\pard\pardeftab720\sa320\partightenfactor0

\f3\fs27\fsmilli13600 \cf3 \cb6 apns:connect/2
\f2\fs32 \cb4 \'a0returns the connection\'a0
\f3\fs27\fsmilli13600 \cb6 pid
\f2\fs32 \cb4 .\
\pard\pardeftab720\sl360\partightenfactor0

\f1\b\fs36 \cf5 \cb1 \
\pard\pardeftab720\sl440\sa320\partightenfactor0
\cf3 \cb4 Create Connections without name\
\pard\pardeftab720\sa320\partightenfactor0

\f2\b0\fs32 \cf3 In some scenarios we don't want to assign names to the connections instead we want working just with the\'a0
\f3\fs27\fsmilli13600 \cb6 pid
\f2\fs32 \cb4 \'a0(working with a pool of connections for example). If that is the case we use the same\'a0
\f3\fs27\fsmilli13600 \cb6 apns:connect/1
\f2\fs32 \cb4 \'a0and\'a0
\f3\fs27\fsmilli13600 \cb6 apns:connect/2
\f2\fs32 \cb4 \'a0functions but instead of a connection name we put\'a0
\f3\fs27\fsmilli13600 \cb6 undefined
\f2\fs32 \cb4 :\
\pard\pardeftab720\sl380\partightenfactor0

\f3\fs27\fsmilli13600 \cf8 \cb7 1\cf9 >\cf3 \cb7  \cf10 \cb7 apns\cf3 \cb7 :\cf10 \cb7 connect\cf3 \cb7 (\cf8 \cb7 cert\cf3 \cb7 , \cf8 \cb7 undefined\cf3 \cb7 ).\
\{\cf8 \cb7 ok\cf3 \cb7 ,\cf9 \cb7 <\cf8 0.127\cf3 \cb7 .\cf8 \cb7 0\cf9 >\cf3 \cb7 \}\
\cf8 \cb7 2\cf9 >\cf3 \cb7  \cf10 \cb7 apns\cf3 \cb7 :\cf10 \cb7 connect\cf3 \cb7 (#\{\cf8 \cb7 name\cf3 \cb7  \cf9 \cb7 =>\cf3 \cb7  \cf8 \cb7 undefined\cf3 \cb7 , \cf8 \cb7 apple_host\cf3 \cb7  \cf9 \cb7 =>\cf3 \cb7  \cf11 \cb7 "api.push.apple.com"\cf3 \cb7 , \cf8 \cb7 apple_port\cf3 \cb7  \cf9 \cb7 =>\cf3 \cb7  \cf8 \cb7 443\cf3 \cb7 ,\
\cf8 \cb7 certfile\cf3 \cb7  \cf9 \cb7 =>\cf3 \cb7  \cf11 \cb7 "priv/cert2.pem"\cf3 \cb7 , \cf8 \cb7 keyfile\cf3 \cb7  \cf9 \cb7 =>\cf3 \cb7  \cf11 \cb7 "priv/key2-noenc.pem"\cf3 \cb7 , \cf8 \cb7 type\cf3 \cb7  \cf9 \cb7 =>\cf3 \cb7  \cf8 \cb7 cert\cf3 \cb7 \}).\
\{\cf8 \cb7 ok\cf3 \cb7 ,\cf9 \cb7 <\cf8 0.130\cf3 \cb7 .\cf8 \cb7 0\cf9 >\cf3 \cb7 \}\
\cf8 \cb7 3\cf9 >\cf3 \cb7  \cf10 \cb7 apns\cf3 \cb7 :\cf10 \cb7 connect\cf3 \cb7 (\cf8 \cb7 token\cf3 \cb7 , \cf8 \cb7 my_second_connection\cf3 \cb7 ).\
\{\cf8 \cb7 ok\cf3 \cb7 ,\cf9 \cb7 <\cf8 0.132\cf3 \cb7 .\cf8 \cb7 0\cf9 >\cf3 \cb7 \}\
\pard\pardeftab720\sl360\partightenfactor0

\f1\b\fs36 \cf5 \cb1 \
\pard\pardeftab720\sl440\sa320\partightenfactor0
\cf3 \cb4 Push Notifications over\'a0
\f4 \cf3 \cb6 Provider Certificate
\f1 \cf3 \cb4 \'a0connections\
\pard\pardeftab720\sa320\partightenfactor0

\f2\b0\fs32 \cf3 In order to send Notifications over\'a0
\f3\fs27\fsmilli13600 \cb6 Provider Certificate
\f2\fs32 \cb4 \'a0connection we will use\'a0
\f3\fs27\fsmilli13600 \cb6 apns:push_notification/3,4
\f2\fs32 \cb4 .\
We will need the connection, a notification, the device ID and some http2 headers. The connection is the\'a0
\f3\fs27\fsmilli13600 \cb6 atom
\f2\fs32 \cb4 \'a0we used when we executed\'a0
\f3\fs27\fsmilli13600 \cb6 apns:connect/2
\f2\fs32 \cb4 \'a0for setting a name or its\'a0
\f3\fs27\fsmilli13600 \cb6 pid
\f2\fs32 \cb4 , the device ID is provided by Apple, the notification is a\'a0
\f3\fs27\fsmilli13600 \cb6 map
\f2\fs32 \cb4 \'a0with the data we want to send, that map will be encoded to json later and the http2 headers can be explicitly sent as a parameter using\'a0
\f3\fs27\fsmilli13600 \cb6 apns:push_notification/4
\f2\fs32 \cb4 \'a0or can be defined at the\'a0
\f3\fs27\fsmilli13600 \cb6 config
\f2\fs32 \cb4 \'a0file, in that case we would use\'a0
\f3\fs27\fsmilli13600 \cb6 apns:push_notification/3
\f2\fs32 \cb4 .\
This is the\'a0
\f3\fs27\fsmilli13600 \cb6 headers
\f2\fs32 \cb4 \'a0format:\
\pard\pardeftab720\sl380\partightenfactor0

\f3\fs27\fsmilli13600 \cf3 \cb7 -\cf9 \cb7 type\cf3 \cb7  \cf10 \cb7 headers\cf3 \cb7 ()   \cf9 \cb7 ::\cf3 \cb7  #\{ \cf8 \cb7 apns_id\cf3 \cb7           \cf9 \cb7 =>\cf3 \cb7  \cf10 \cb7 binary\cf3 \cb7 ()\
                      , \cf8 \cb7 apns_expiration\cf3 \cb7   \cf9 \cb7 =>\cf3 \cb7  \cf10 \cb7 binary\cf3 \cb7 ()\
                      , \cf8 \cb7 apns_priority\cf3 \cb7     \cf9 \cb7 =>\cf3 \cb7  \cf10 \cb7 binary\cf3 \cb7 ()\
                      , \cf8 \cb7 apns_topic\cf3 \cb7        \cf9 \cb7 =>\cf3 \cb7  \cf10 \cb7 binary\cf3 \cb7 ()\
                      , \cf8 \cb7 apns_collapse_id\cf3 \cb7  \cf9 \cb7 =>\cf3 \cb7  \cf10 \cb7 binary\cf3 \cb7 ()\
                      , \cf8 \cb7 apns_push_type\cf3 \cb7    \cf9 \cb7 =>\cf3 \cb7  \cf10 \cb7 binary\cf3 \cb7 ()\
                      , \cf8 \cb7 apns_auth_token\cf3 \cb7   \cf9 \cb7 =>\cf3 \cb7  \cf10 \cb7 binary\cf3 \cb7 ()\
                      \}.\
\pard\pardeftab720\sa320\partightenfactor0

\f2\fs32 \cf3 \cb4 All of them are defined by Apple\'a0{\field{\*\fldinst{HYPERLINK "https://developer.apple.com/library/content/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/CommunicatingwithAPNs.html"}}{\fldrslt \cf5 here}}\
Lets send a Notification.\
\pard\pardeftab720\sl380\partightenfactor0

\f3\fs27\fsmilli13600 \cf8 \cb7 1\cf9 >\cf3 \cb7  \{\cf8 \cb7 ok\cf3 \cb7 , Pid\} \cf9 \cb7 =\cf3 \cb7  \cf10 \cb7 apns\cf3 \cb7 :\cf10 \cb7 connect\cf3 \cb7 (\cf8 \cb7 cert\cf3 \cb7 , \cf8 \cb7 my_first_connection\cf3 \cb7 ).\
\{\cf8 \cb7 ok\cf3 \cb7 ,\cf9 \cb7 <\cf8 0.85\cf3 \cb7 .\cf8 \cb7 0\cf9 >\cf3 \cb7 \}\
\cf8 \cb7 2\cf9 >\cf3 \cb7  DeviceId \cf9 \cb7 =\cf3 \cb7  <<\cf11 \cb7 "a0dc63fb059cb9c13b03e5c974af3dd33d67fed4147da8c5ada0626439e18935"\cf3 \cb7 >>.\
<<\cf11 \cb7 "a0dc63fb059cb9c13b03e5c974af3dd33d67fed4147da8c5ada0626439e18935"\cf3 \cb7 >>\
\cf8 \cb7 3\cf9 >\cf3 \cb7  Notification \cf9 \cb7 =\cf3 \cb7  #\{\cf8 \cb7 aps\cf3 \cb7  \cf9 \cb7 =>\cf3 \cb7  #\{\cf8 \cb7 alert\cf3 \cb7  \cf9 \cb7 =>\cf3 \cb7  <<\cf11 \cb7 "you have a message"\cf3 \cb7 >>\}\}.\
#\{\cf8 \cb7 aps\cf3 \cb7  \cf9 \cb7 =>\cf3 \cb7  #\{\cf8 \cb7 alert\cf3 \cb7  \cf9 \cb7 =>\cf3 \cb7  <<\cf11 \cb7 "you have a message"\cf3 \cb7 >>\}\}\
\cf8 \cb7 4\cf9 >\cf3 \cb7  \cf10 \cb7 apns\cf3 \cb7 :\cf10 \cb7 push_notification\cf3 \cb7 (\cf8 \cb7 my_first_connection\cf3 \cb7 , DeviceId, Notification).\
\{\cf8 \cb7 200\cf3 \cb7 ,\
 [\{<<\cf11 \cb7 "apns-id"\cf3 \cb7 >>,<<\cf11 \cb7 "EFDE0D9D-F60C-30F4-3FF1-86F3B90BE434"\cf3 \cb7 >>\}],\
 \cf8 \cb7 no_body\cf3 \cb7 \}\
\cf8 \cb7 5\cf9 >\cf3 \cb7  \cf10 \cb7 apns\cf3 \cb7 :\cf10 \cb7 push_notification\cf3 \cb7 (Pid, DeviceId, Notification).\
\{\cf8 \cb7 200\cf3 \cb7 ,\
 [\{<<\cf11 \cb7 "apns-id"\cf3 \cb7 >>,<<\cf11 \cb7 "EFDE0D9D-F60C-30F4-3FF1-86F3B90BE654"\cf3 \cb7 >>\}],\
 \cf8 \cb7 no_body\cf3 \cb7 \}\
\pard\pardeftab720\sa320\partightenfactor0

\f2\fs32 \cf3 \cb4 The result is the response itself, its format is:\
\pard\pardeftab720\sl380\partightenfactor0

\f3\fs27\fsmilli13600 \cf3 \cb7 -\cf9 \cb7 type\cf3 \cb7  \cf10 \cb7 response\cf3 \cb7 ()  \cf9 \cb7 ::\cf3 \cb7  \{ \cf10 \cb7 integer\cf3 \cb7 ()          \cf12 \cb7 % HTTP2 Code\cf3 \cb7 \
                     , [\cf10 \cb7 term\cf3 \cb7 ()]           \cf12 \cb7 % Response Headers\cf3 \cb7 \
                     , [\cf10 \cb7 term\cf3 \cb7 ()] | \cf8 \cb7 no_body\cf3 \cb7  \cf12 \cb7 % Response Body\cf3 \cb7 \
                     \} | \cf8 \cb7 timeout\cf3 \cb7 .\
\pard\pardeftab720\sa320\partightenfactor0

\f2\fs32 \cf3 \cb4 And that's all.\
\pard\pardeftab720\sl360\partightenfactor0

\f1\b\fs36 \cf5 \cb1 \
\pard\pardeftab720\sl440\sa320\partightenfactor0
\cf3 \cb4 Push Notifications over\'a0
\f4 \cf3 \cb6 Provider Authentication Tokens
\f1 \cf3 \cb4 \'a0connections\
\pard\pardeftab720\sa320\partightenfactor0

\f2\b0\fs32 \cf3 This is the other way APNs allows us to send notifications. In this case we don't need a certificate but we will need a\'a0
\f3\fs27\fsmilli13600 \cb6 p8
\f2\fs32 \cb4 \'a0file with the private key we will use to sign the token. Lets assume we've got the file\'a0
\f3\fs27\fsmilli13600 \cb6 APNsAuthKey_KEYID12345.p8
\f2\fs32 \cb4 \'a0from Apple. We then have to fill the\'a0
\f3\fs27\fsmilli13600 \cb6 config
\f2\fs32 \cb4 \'a0file key\'a0
\f3\fs27\fsmilli13600 \cb6 token_keyfile
\f2\fs32 \cb4 \'a0with the path to that file.\
We will need a\'a0
\f3\fs27\fsmilli13600 \cb6 kid
\f2\fs32 \cb4 \'a0value, this is the key identifier. In our case is the last 10 chars of the file name (
\f3\fs27\fsmilli13600 \cb6 KEYID123456
\f2\fs32 \cb4 ). We will need also the\'a0
\f3\fs27\fsmilli13600 \cb6 iss
\f2\fs32 \cb4 \'a0value, this is the Team Id, that can be checked on your Apple's Developer account, in our case it will be\'a0
\f3\fs27\fsmilli13600 \cb6 THEATEAM
\f2\fs32 \cb4 . And that's it.\
You can find more info\'a0{\field{\*\fldinst{HYPERLINK "https://developer.apple.com/library/content/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/CommunicatingwithAPNs.html"}}{\fldrslt \cf5 here}}\
In order to push a notification we will use\'a0
\f3\fs27\fsmilli13600 \cb6 apns:push_notification_token/4,5
\f2\fs32 \cb4 . We will need the same attributes we used sending a notification over\'a0
\f3\fs27\fsmilli13600 \cb6 Provider Certificate
\f2\fs32 \cb4 \'a0connections plus a signed\'a0
\f3\fs27\fsmilli13600 \cb6 token
\f2\fs32 \cb4 . This token has a 1 hour life, so that means we can generate one token and use it many times till it expires. Lets try.\
Create the token:\
\pard\pardeftab720\sl380\partightenfactor0

\f3\fs27\fsmilli13600 \cf8 \cb7 6\cf9 >\cf3 \cb7  TeamId \cf9 \cb7 =\cf3 \cb7  <<\cf11 \cb7 "THEATEAM"\cf3 \cb7 >>.\
<<\cf11 \cb7 "THEATEAM"\cf3 \cb7 >>\
\cf8 \cb7 7\cf9 >\cf3 \cb7  KeyID \cf9 \cb7 =\cf3 \cb7  <<\cf11 \cb7 "KEYID123456"\cf3 \cb7 >>.\
<<\cf11 \cb7 "KEYID123456"\cf3 \cb7 >>\
\cf8 \cb7 8\cf9 >\cf3 \cb7  Token \cf9 \cb7 =\cf3 \cb7  \cf10 \cb7 apns\cf3 \cb7 :\cf10 \cb7 generate_token\cf3 \cb7 (TeamId, KeyID).\
<<\cf11 \cb7 "eyJhbGciOiJFUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IktFWUlEMTIzNDU2In0.eyJpc3MiOiJUSEVBVEVBTSIsImlhdCI6MTQ4NjE0OTMzNH0.MEQC"\cf3 \cb7 ...>>\
\pard\pardeftab720\sa320\partightenfactor0

\f2\fs32 \cf3 \cb4 Now push the notification:\
\pard\pardeftab720\sl380\partightenfactor0

\f3\fs27\fsmilli13600 \cf8 \cb7 12\cf9 >\cf3 \cb7  DeviceId \cf9 \cb7 =\cf3 \cb7  <<\cf11 \cb7 "a0dc63fb059cb9c13b03e5c974af3dd33d67fed4147da8c5ada0626439e18935"\cf3 \cb7 >>.\
<<\cf11 \cb7 "a0dc63fb059cb9c13b03e5c974af3dd33d67fed4147da8c5ada0626439e18935"\cf3 \cb7 >>\
\cf8 \cb7 13\cf9 >\cf3 \cb7  Notification \cf9 \cb7 =\cf3 \cb7  #\{\cf8 \cb7 aps\cf3 \cb7  \cf9 \cb7 =>\cf3 \cb7  #\{\cf8 \cb7 alert\cf3 \cb7  \cf9 \cb7 =>\cf3 \cb7  <<\cf11 \cb7 "you have a message"\cf3 \cb7 >>\}\}.\
#\{\cf8 \cb7 aps\cf3 \cb7  \cf9 \cb7 =>\cf3 \cb7  #\{\cf8 \cb7 alert\cf3 \cb7  \cf9 \cb7 =>\cf3 \cb7  <<\cf11 \cb7 "you have a message"\cf3 \cb7 >>\}\}\
\cf8 \cb7 14\cf9 >\cf3 \cb7  \cf10 \cb7 apns\cf3 \cb7 :\cf10 \cb7 push_notification_token\cf3 \cb7 (\cf8 \cb7 my_second_connection\cf3 \cb7 , Token, DeviceId, Notification).\
\{\cf8 \cb7 200\cf3 \cb7 ,\
 [\{<<\cf11 \cb7 "apns-id"\cf3 \cb7 >>,<<\cf11 \cb7 "EBC03BF9-A784-FDED-34F7-5A8D859DA977"\cf3 \cb7 >>\}],\
 \cf8 \cb7 no_body\cf3 \cb7 \}\
\pard\pardeftab720\sa320\partightenfactor0

\f2\fs32 \cf3 \cb4 We can use this token for an entire hour, after that we will receive something like this:\
\pard\pardeftab720\sl380\partightenfactor0

\f3\fs27\fsmilli13600 \cf8 \cb7 16\cf9 >\cf3 \cb7  \cf10 \cb7 apns\cf3 \cb7 :\cf10 \cb7 push_notification_token\cf3 \cb7 (\cf8 \cb7 my_second_connection\cf3 \cb7 , Token, DeviceId, Notification).\
\{\cf8 \cb7 403\cf3 \cb7 ,\
 [\{<<\cf11 \cb7 "apns-id"\cf3 \cb7 >>,<<\cf11 \cb7 "03FF9497-8A6B-FFD6-B32B-160ACEDE35F0"\cf3 \cb7 >>\}],\
 [\{<<\cf11 \cb7 "reason"\cf3 \cb7 >>,<<\cf11 \cb7 "ExpiredProviderToken"\cf3 \cb7 >>\}]\}\
\pard\pardeftab720\sl360\partightenfactor0

\f1\b\fs36 \cf5 \cb1 \
\pard\pardeftab720\sl440\sa320\partightenfactor0
\cf3 \cb4 Pushing notifications\
\pard\pardeftab720\sa320\partightenfactor0

\f5\i\b0\fs32 \cf3 NOTE
\f2\i0 \cf3 \'a0in order to push notifications, in both ways, we\'a0
\f5\i \cf3 must
\f2\i0 \cf3 \'a0call\'a0
\f3\fs27\fsmilli13600 \cb6 apns:push_notification/3,4
\f2\fs32 \cb4 \'a0and\'a0
\f3\fs27\fsmilli13600 \cb6 apns:push_notification_token/4,5
\f2\fs32 \cb4 \'a0from the same process which created the connection. If we try to do it from a different one we will get an error\'a0
\f3\fs27\fsmilli13600 \cb6 \{error, not_connection_owner\}
\f2\fs32 \cb4 .\
\pard\pardeftab720\sl360\partightenfactor0

\f1\b\fs36 \cf5 \cb1 \
\pard\pardeftab720\sl440\sa320\partightenfactor0
\cf3 \cb4 Reconnection\
\pard\pardeftab720\sa320\partightenfactor0

\f2\b0\fs32 \cf3 If network goes down or something unexpected happens the\'a0
\f3\fs27\fsmilli13600 \cb6 gun
\f2\fs32 \cb4 \'a0connection with APNs will go down. In that case\'a0
\f3\fs27\fsmilli13600 \cb6 apns4erl
\f2\fs32 \cb4 \'a0will send a message\'a0
\f3\fs27\fsmilli13600 \cb6 \{reconnecting, ServerPid\}
\f2\fs32 \cb4 \'a0to the client process, that means\'a0
\f3\fs27\fsmilli13600 \cb6 apns4erl
\f2\fs32 \cb4 \'a0lost the connection and it is trying to reconnect. Once the connection has been recover a\'a0
\f3\fs27\fsmilli13600 \cb6 \{connection_up, ServerPid\}
\f2\fs32 \cb4 \'a0message will be send.\
We implemented an\'a0
\f5\i \cf3 Exponential Backoff
\f2\i0 \cf3 \'a0strategy. We can set the\'a0
\f5\i \cf3 ceiling
\f2\i0 \cf3 \'a0time adding the\'a0
\f3\fs27\fsmilli13600 \cb6 backoff_ceiling
\f2\fs32 \cb4 \'a0variable on the\'a0
\f3\fs27\fsmilli13600 \cb6 config
\f2\fs32 \cb4 \'a0file. By default it is set to 10 (seconds).\
\pard\pardeftab720\sl360\partightenfactor0

\f1\b\fs36 \cf5 \cb1 \
\pard\pardeftab720\sl440\sa320\partightenfactor0
\cf3 \cb4 Close connections\
\pard\pardeftab720\sa320\partightenfactor0

\f2\b0\fs32 \cf3 Apple recommends us to keep our connections open and avoid opening and closing very often. You can check the\'a0{\field{\*\fldinst{HYPERLINK "https://developer.apple.com/library/content/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/CommunicatingwithAPNs.html"}}{\fldrslt \cf5 Best Practices for Managing Connections}}\'a0section.\
But when closing a connection makes sense\'a0
\f3\fs27\fsmilli13600 \cb6 apns4erl
\f2\fs32 \cb4 \'a0gives us the function\'a0
\f3\fs27\fsmilli13600 \cb6 apns:close_connection/1
\f2\fs32 \cb4 \'a0where the parameter is the connection's name or the connection's\'a0
\f3\fs27\fsmilli13600 \cb6 pid
\f2\fs32 \cb4 . After using it the name will be available for new connections again (if it was different than\'a0
\f3\fs27\fsmilli13600 \cb6 undefined
\f2\fs32 \cb4 ).\
\pard\pardeftab720\sl360\partightenfactor0

\f1\b\fs36 \cf5 \cb1 \
\pard\pardeftab720\sl440\sa320\partightenfactor0
\cf3 \cb4 Feedback\
\pard\pardeftab720\sa320\partightenfactor0

\f3\b0\fs27\fsmilli13600 \cf3 \cb6 apns4erl
\f2\fs32 \cb4 \'a0also allows us to get feedback from APNs service. It does it thru the\'a0{\field{\*\fldinst{HYPERLINK "https://developer.apple.com/library/content/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/BinaryProviderAPI.html"}}{\fldrslt \cf5 binary API}}.\
In order to get feedback we would need a\'a0
\f3\fs27\fsmilli13600 \cb6 Provider Certificate
\f2\fs32 \cb4 .\'a0
\f3\fs27\fsmilli13600 \cb6 apns4erl
\f2\fs32 \cb4 \'a0provides us two functions,\'a0
\f3\fs27\fsmilli13600 \cb6 apns:get_feedback/0
\f2\fs32 \cb4 \'a0and\'a0
\f3\fs27\fsmilli13600 \cb6 apns:get_feedback/1
\f2\fs32 \cb4 \'a0which require some Feedback's information like url, port, timeout... We can set that info in our\'a0
\f3\fs27\fsmilli13600 \cb6 config
\f2\fs32 \cb4 \'a0file and use\'a0
\f3\fs27\fsmilli13600 \cb6 apns:get_feedback/0
\f2\fs32 \cb4 . We can also send all that configuration as a parameter to\'a0
\f3\fs27\fsmilli13600 \cb6 apns:get_feedback/1
\f2\fs32 \cb4 \'a0where the config structure must looks like this:\
\pard\pardeftab720\sl380\partightenfactor0

\f3\fs27\fsmilli13600 \cf3 \cb7 #\{ \cf8 \cb7 host\cf3 \cb7      :\cf9 \cb7 =\cf3 \cb7  \cf10 \cb7 string\cf3 \cb7 ()\
 , \cf8 \cb7 port\cf3 \cb7      :\cf9 \cb7 =\cf3 \cb7  \cf10 \cb7 pos_integer\cf3 \cb7 ()\
 , \cf8 \cb7 certfile\cf3 \cb7  :\cf9 \cb7 =\cf3 \cb7  \cf10 \cb7 string\cf3 \cb7 ()\
 , \cf8 \cb7 keyfile\cf3 \cb7   \cf9 \cb7 =>\cf3 \cb7  \cf10 \cb7 string\cf3 \cb7 ()\
 , \cf8 \cb7 timeout\cf3 \cb7   :\cf9 \cb7 =\cf3 \cb7  \cf10 \cb7 pos_integer\cf3 \cb7 ()\
 \}.\
\pard\pardeftab720\sa320\partightenfactor0

\f2\fs32 \cf3 \cb4 The response for both functions will be a list of\'a0
\f3\fs27\fsmilli13600 \cb6 feedback()
\f2\fs32 \cb4 \
\pard\pardeftab720\sl380\partightenfactor0

\f3\fs27\fsmilli13600 \cf3 \cb7 -\cf9 \cb7 type\cf3 \cb7  \cf10 \cb7 feedback\cf3 \cb7 () \cf9 \cb7 ::\cf3 \cb7  \{\cf10 \cb7 calendar\cf3 \cb7 :\cf10 \cb7 datetime\cf3 \cb7 (), \cf10 \cb7 string\cf3 \cb7 ()\}.\
\pard\pardeftab720\partightenfactor0

\f2\fs32 \cf3 \cb4 Where the first element in the tuple is the date when the device uninstalled the app and the second element is the Device Id.\
}