{\rtf1\ansi\ansicpg1252\cocoartf2512
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 GillSans;\f1\fnil\fcharset0 HelveticaNeue-Bold;\f2\fnil\fcharset0 HelveticaNeue;
\f3\fnil\fcharset0 Consolas;\f4\fnil\fcharset0 Consolas-Bold;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue233;\red27\green31\blue34;\red255\green255\blue255;
\red10\green77\blue204;\red244\green246\blue249;\red21\green23\blue26;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c93333;\cssrgb\c14118\c16078\c18039;\cssrgb\c100000\c100000\c100000;
\cssrgb\c1176\c40000\c83922;\cssrgb\c96471\c97255\c98039;\cssrgb\c10588\c12157\c13725\c5098;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}}
\margl1440\margr1440\vieww9000\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs128 \cf2 \expnd0\expndtw0\kerning0
\ul \ulc2 \
pyapns\
\pard\pardeftab720\sl600\sa320\partightenfactor0

\f1\b\fs48 \cf3 \cb4 \ulnone \
\pard\pardeftab720\sa320\partightenfactor0

\f2\b0\fs32 \cf3 A universal Apple Push Notification Service (APNS) provider.\
Features:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls1\ilvl0\cf3 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
XML-RPC Based, works with any client in any language\cb1 \
\ls1\ilvl0\cb4 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Native Python API with Django and Pylons support\cb1 \
\ls1\ilvl0\cb4 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Native Ruby API with Rails/Rack support\cb1 \
\ls1\ilvl0\cb4 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Scalable, fast and easy to distribute behind a proxy\cb1 \
\ls1\ilvl0\cb4 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Based on Twisted\cb1 \
\ls1\ilvl0\cb4 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Multi-application and dual environment support\cb1 \
\ls1\ilvl0\cb4 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Simplified feedback interface\cb1 \
\pard\pardeftab720\sa320\partightenfactor0
\cf3 \cb4 pyapns is an APNS provider that you install on your server and access through XML-RPC. To install you will need Python,\'a0{\field{\*\fldinst{HYPERLINK "http://pypi.python.org/pypi/Twisted"}}{\fldrslt \cf5 Twisted}}\'a0and\'a0{\field{\*\fldinst{HYPERLINK "http://pypi.python.org/pypi/pyOpenSSL"}}{\fldrslt \cf5 pyOpenSSL}}. It's also recommended to install\'a0{\field{\*\fldinst{HYPERLINK "http://pypi.python.org/pypi/python-epoll/"}}{\fldrslt \cf5 python-epoll}}\'a0for best performance (if epoll is not available, like on Mac OS X, you may want to use another library, like\'a0{\field{\*\fldinst{HYPERLINK "http://pypi.python.org/pypi/py-kqueue/2.0.1"}}{\fldrslt \cf5 py-kqueue}}). If you like easy_install try (it should take care of the dependancies for you):\
\pard\pardeftab720\sl380\partightenfactor0

\f3\fs27\fsmilli13600 \cf3 \cb6 $ sudo easy_install pyapns\
\pard\pardeftab720\sa320\partightenfactor0

\f2\fs32 \cf3 \cb4 pyapns is a service that runs persistently on your machine. To start it:\
\pard\pardeftab720\sl380\partightenfactor0

\f3\fs27\fsmilli13600 \cf3 \cb6 $ twistd -r epoll web --class=pyapns.server.APNSServer --port=7077\
\pard\pardeftab720\sa320\partightenfactor0

\f2\fs32 \cf3 \cb4 This will create a\'a0
\f3\fs27\fsmilli13600 \cb7 twistd.pid
\f2\fs32 \cb4 \'a0file in your current directory that can be used to kill the process.\'a0
\f3\fs27\fsmilli13600 \cb7 twistd
\f2\fs32 \cb4 \'a0is a launcher used for running network persistent network applications. It takes many more options that can be found by running\'a0
\f3\fs27\fsmilli13600 \cb7 man twistd
\f2\fs32 \cb4 \'a0or using a\'a0{\field{\*\fldinst{HYPERLINK "http://linux.die.net/man/1/twistd"}}{\fldrslt \cf5 web man page}}.\
To get started right away, use the included client:\
\pard\pardeftab720\sl380\partightenfactor0

\f3\fs27\fsmilli13600 \cf3 \cb6 $ python\
>>> from pyapns import configure, provision, notify\
>>> configure(\{'HOST': 'http://localhost:7077/'\})\
>>> provision('myapp', open('cert.pem').read(), 'sandbox')\
>>> notify('myapp', 'hexlified_token_str', \{'aps':\{'alert': 'Hello!'\}\})\
\pard\pardeftab720\sl300\partightenfactor0

\f1\b\fs30 \cf5 \cb1 \
\pard\pardeftab720\sl360\sa320\partightenfactor0
\cf3 \cb4 The Multi-Application Model\
\pard\pardeftab720\sa320\partightenfactor0

\f2\b0\fs32 \cf3 pyapns supports multiple applications. Before pyapns can send notifications, you must first provision the application with an Application ID, the environment (either 'sandbox' or 'production') and the certificate file. The\'a0
\f3\fs27\fsmilli13600 \cb7 provision
\f2\fs32 \cb4 \'a0method takes 4 arguments,\'a0
\f3\fs27\fsmilli13600 \cb7 app_id
\f2\fs32 \cb4 ,\'a0
\f3\fs27\fsmilli13600 \cb7 path_to_cert_or_cert
\f2\fs32 \cb4 ,\'a0
\f3\fs27\fsmilli13600 \cb7 environment
\f2\fs32 \cb4 \'a0and\'a0
\f3\fs27\fsmilli13600 \cb7 timeout
\f2\fs32 \cb4 . A connection is kept alive for each application provisioned for the fastest service possible. The application ID is an arbitrary identifier and is not used in communication with the APNS servers.\
When a connection can not be made within the specified\'a0
\f3\fs27\fsmilli13600 \cb7 timeout
\f2\fs32 \cb4 \'a0a timeout error will be thrown by the server. This usually indicates that the wrong [type of] certification file is being used, a blocked port or the wrong environment.\
Attempts to provision the same application id multiple times are ignored.\
\pard\pardeftab720\sl300\partightenfactor0

\f1\b\fs30 \cf5 \cb1 \
\pard\pardeftab720\sl360\sa320\partightenfactor0
\cf3 \cb4 Sending Notifications\
\pard\pardeftab720\sa320\partightenfactor0

\f2\b0\fs32 \cf3 Calling\'a0
\f3\fs27\fsmilli13600 \cb7 notify
\f2\fs32 \cb4 \'a0will send the message immediately if a connection is already established. The first notification may be delayed a second while the server connects.\'a0
\f3\fs27\fsmilli13600 \cb7 notify
\f2\fs32 \cb4 \'a0takes\'a0
\f3\fs27\fsmilli13600 \cb7 app_id
\f2\fs32 \cb4 ,\'a0
\f3\fs27\fsmilli13600 \cb7 token_or_token_list
\f2\fs32 \cb4 \'a0and\'a0
\f3\fs27\fsmilli13600 \cb7 notification_or_notification_list
\f2\fs32 \cb4 . Multiple notifications can be batched for better performance by using paired arrays of token/notifications. When performing batched notifications, the token and notification arrays must be exactly the same length.\
The full notification dictionary must be included as the notification:\
\pard\pardeftab720\sl380\partightenfactor0

\f3\fs27\fsmilli13600 \cf3 \cb6 \{'aps': \{\
    'sound': 'flynn.caf',\
    'badge': 0,\
    'message': 'Hello from pyapns :)'\
  \}\
\} # etc...\
\pard\pardeftab720\sl300\partightenfactor0

\f1\b\fs30 \cf5 \cb1 \
\pard\pardeftab720\sl360\sa320\partightenfactor0
\cf3 \cb4 Retrieving Inactive Tokens\
\pard\pardeftab720\sa320\partightenfactor0

\f2\b0\fs32 \cf3 Call\'a0
\f3\fs27\fsmilli13600 \cb7 feedback
\f2\fs32 \cb4 \'a0with the\'a0
\f3\fs27\fsmilli13600 \cb7 app_id
\f2\fs32 \cb4 . A list of tuples will be retrieved from the APNS server that it deems inactive. These are returned as a list of 2-element lists with a\'a0
\f3\fs27\fsmilli13600 \cb7 Datetime
\f2\fs32 \cb4 \'a0object and the token string.\
\pard\pardeftab720\sl300\partightenfactor0

\f1\b\fs30 \cf5 \cb1 \
\pard\pardeftab720\sl360\sa320\partightenfactor0
\cf3 \cb4 XML-RPC Methods\
\pard\pardeftab720\sa320\partightenfactor0

\f2\b0\fs32 \cf3 These methods can be called on the server you started the server on. Be sure you are not including\'a0
\f3\fs27\fsmilli13600 \cb7 /RPC2
\f2\fs32 \cb4 \'a0in the URL.\
\pard\pardeftab720\sl300\partightenfactor0

\f1\b\fs30 \cf5 \cb1 \
\pard\pardeftab720\sl360\sa320\partightenfactor0
\cf3 \cb4 provision\
\pard\pardeftab720\sl380\partightenfactor0

\f3\b0\fs27\fsmilli13600 \cf3 \cb6   Arguments\
      app_id        String            the application id for the provided\
                                      certification\
      cert          String            a path to a .pem file or the a\
                                      string with the entie file\
      environment   String            the APNS server to use - either\
                                      'production' or 'sandbox'\
      timeout       Integer           timeout for connection attempts to\
                                      the APS servers\
  Returns\
      None\
\pard\pardeftab720\sl300\partightenfactor0

\f1\b\fs30 \cf5 \cb1 \
\pard\pardeftab720\sl360\sa320\partightenfactor0
\cf3 \cb4 notify\
\pard\pardeftab720\sl380\partightenfactor0

\f3\b0\fs27\fsmilli13600 \cf3 \cb6   Arguments\
      app_id        String            the application id to send the\
                                      message to\
      tokens        String or Array   an Array of tokens or a single\
                                      token string\
      notifications String or Array   an Array of notification\
                                      dictionaries or a single\
                                      notification dictionary\
  \
  Returns\
      None\
\pard\pardeftab720\sl300\partightenfactor0

\f1\b\fs30 \cf5 \cb1 \
\pard\pardeftab720\sl360\sa320\partightenfactor0
\cf3 \cb4 feedback\
\pard\pardeftab720\sl380\partightenfactor0

\f3\b0\fs27\fsmilli13600 \cf3 \cb6   Arguments\
      app_id        String            the application id to retrieve\
                                      retrieve feedback for\
  \
  Returns\
      Array(Array(Datetime(time_expired), String(token)), ...)\
\pard\pardeftab720\sl300\partightenfactor0

\f1\b\fs30 \cf5 \cb1 \
\pard\pardeftab720\sl360\sa320\partightenfactor0
\cf3 \cb4 The Python API\
\pard\pardeftab720\sa320\partightenfactor0

\f2\b0\fs32 \cf3 pyapns also provides a Python API that makes the use of pyapns even simpler. The Python API must be configured before use but configuration files make it easier. The pyapns\'a0
\f3\fs27\fsmilli13600 \cb7 client
\f2\fs32 \cb4 \'a0module currently supports configuration from Django settings and Pylons config. To configure using Django, the following must be present in your settings file:\
\pard\pardeftab720\sl380\partightenfactor0

\f3\fs27\fsmilli13600 \cf3 \cb6 PYAPNS_CONFIG = \{\
  'HOST': 'http://localhost:8077/',\
  'TIMEOUT': 15,                    # OPTIONAL, host timeout in seconds\
  'INITIAL': [                      # OPTIONAL, see below\
    ('craigsfish', '/home/samsutch/craigsfish/apscert.pem', 'sandbox'),\
  ]\
\}\
\pard\pardeftab720\sa320\partightenfactor0

\f2\fs32 \cf3 \cb4 Optionally, with Django settings, you can skip manual provisioning by including a list of\'a0
\f3\fs27\fsmilli13600 \cb7 (name, path, environment)
\f2\fs32 \cb4 \'a0tuples that are guaranteed to be provisioned by the time you call\'a0
\f3\fs27\fsmilli13600 \cb7 notify
\f2\fs32 \cb4 \'a0or\'a0
\f3\fs27\fsmilli13600 \cb7 feedback
\f2\fs32 \cb4 .\
Configuring for pylons is just as simple, but automatic provisioning isn't possible, in your configuration file include:\
\pard\pardeftab720\sl380\partightenfactor0

\f3\fs27\fsmilli13600 \cf3 \cb6 pyapns_host = http://localhost:8077/\
pyapns_timeout = 15\
\pard\pardeftab720\sa320\partightenfactor0

\f2\fs32 \cf3 \cb4 For explanations of the configuration variables see the docs for\'a0
\f3\fs27\fsmilli13600 \cb7 pyapns.client.configure
\f2\fs32 \cb4 .\
Each of these functions can be called synchronously and asynchronously. To make them perform asynchronously simply supply a callback and pass\'a0
\f3\fs27\fsmilli13600 \cb7 async=True
\f2\fs32 \cb4 \'a0to the function. The request will then be made in another thread and your callback will be executed with the results. When calling asynchronously no value will be returned:\
\pard\pardeftab720\sl380\partightenfactor0

\f3\fs27\fsmilli13600 \cf3 \cb6 def got_feedback(tuples):\
  trim_inactive_tokens(tuples)\
feedback('myapp', async=True, callback=got_feedback)\
\pard\pardeftab720\sl300\partightenfactor0

\f1\b\fs30 \cf5 \cb1 \
\pard\pardeftab720\sl360\sa320\partightenfactor0

\f4 \cf3 \cb7 pyapns.client.configure(opts)
\f1 \cb4 \
\pard\pardeftab720\sl380\partightenfactor0

\f3\b0\fs27\fsmilli13600 \cf3 \cb6 Takes a dictionary of options and configures the client. \
Currently configurable options are 'HOST', 'TIMEOUT' and 'INITIAL' \
the latter of which is only read once.\
\
Config Options:\
    HOST        - A full host name with port, ending with a forward slash\
    TIMEOUT     - An integer specifying how many seconds to timeout a\
                  connection to the pyapns server (prevents deadlocking\
                  the parent thread).\
    INITIAL     - A List of tuples to be supplied to provision when\
                  the first configuration happens.\
\pard\pardeftab720\sl300\partightenfactor0

\f1\b\fs30 \cf5 \cb1 \
\pard\pardeftab720\sl360\sa320\partightenfactor0

\f4 \cf3 \cb7 pyapns.client.provision(app_id, path_to_cert_or_cert, environment, timeout=15, async=False, callback=None, errback=None)
\f1 \cb4 \
\pard\pardeftab720\sl380\partightenfactor0

\f3\b0\fs27\fsmilli13600 \cf3 \cb6 Provisions the app_id and initializes a connection to the APNS server.\
Multiple calls to this function will be ignored by the pyapns daemon\
but are still sent so pick a good place to provision your apps, optimally\
once.\
\
Arguments:\
    app_id                 the app_id to provision for APNS\
    path_to_cert_or_cert   absolute path to the APNS SSL cert or a \
                           string containing the .pem file\
    environment            either 'sandbox' or 'production'\
    timeout                number of seconds to timeout connection\
                           attempts to the APPLE APS SERVER\
    async                  pass something truthy to execute the request in a \
                           background thread\
    callback               a function to be executed with the result\
    errback                a function to be executed with the error in case of an error\
\
Returns:\
    None\
\pard\pardeftab720\sl300\partightenfactor0

\f1\b\fs30 \cf5 \cb1 \
\pard\pardeftab720\sl360\sa320\partightenfactor0

\f4 \cf3 \cb7 pyapns.client.notify(app_id, tokens, notifications, async=False, callback=None, errback=None)
\f1 \cb4 \
\pard\pardeftab720\sl380\partightenfactor0

\f3\b0\fs27\fsmilli13600 \cf3 \cb6 Sends push notifications to the APNS server. Multiple \
notifications can be sent by sending pairing the token/notification\
arguments in lists [token1, token2], [notification1, notification2].\
\
Arguments:\
    app_id                 provisioned app_id to send to\
    tokens                 token to send the notification or a \
                           list of tokens\
    notifications          notification dict or a list of notification dicts\
    async                  pass something truthy to execute the request in a \
                           background thread\
    callback               a function to be executed with the result when done\
    errback                a function to be executed with the error in case of an error\
\
  Returns:\
      None\
\pard\pardeftab720\sl300\partightenfactor0

\f1\b\fs30 \cf5 \cb1 \
\pard\pardeftab720\sl360\sa320\partightenfactor0

\f4 \cf3 \cb7 pyapns.client.feedback(app_id, async=False, callback=None, errback=None)
\f1 \cb4 \
\pard\pardeftab720\sl380\partightenfactor0

\f3\b0\fs27\fsmilli13600 \cf3 \cb6 Retrieves a list of inactive tokens from the APNS server and the times\
it thinks they went inactive.\
\
Arguments:\
    app_id                 the app_id to query\
    async                  pass something truthy to execute the request in \
                           a background thread\
    callback               a function to be executed with the result when \
                           feedbacks are done fetching\
    errback                a function to be executed with the error if there\
                           is one during the request\
\
Returns:\
    List of feedback tuples like [(datetime_expired, token_str), ...]\
\pard\pardeftab720\sl360\partightenfactor0

\f1\b\fs36 \cf5 \cb1 \
\pard\pardeftab720\sl440\sa320\partightenfactor0
\cf3 \cb4 The Ruby API\
\pard\pardeftab720\sl300\partightenfactor0

\fs30 \cf5 \cb1 \
\pard\pardeftab720\sl360\sa320\partightenfactor0
\cf3 \cb4 PYAPNS::Client\
\pard\pardeftab720\sa320\partightenfactor0

\f2\b0\fs32 \cf3 There's python in my ruby!\
The ruby gem can be installed from\'a0{\field{\*\fldinst{HYPERLINK "https://github.com/krasio/pyapns_gem"}}{\fldrslt \cf5 here}}\
This is a class used to send notifications, provision applications and retrieve feedback using the Apple Push Notification Service.\
PYAPNS is a multi-application APS provider, meaning it is possible to send notifications to any number of different applications from the same application and same server. It is also possible to scale the client to any number of processes and servers, simply balanced behind a simple web proxy.\
It may seem like overkill for such a bare interface - after all, the APS service is rather simplistic. However, PYAPNS takes no shortcuts when it comes to completeness/compliance with the APNS protocol and allows the user many optimization and scaling vectors not possible with other libraries. No bandwidth is wasted, connections are persistent and the server is asynchronous therefore notifications are delivered immediately.\
PYAPNS takes after the design of 3rd party push notification service that charge a fee each time you push a notification, and charge extra for so-called 'premium' service which supposedly gives you quicker access to the APS servers. However, PYAPNS is free, as in beer and offers more scaling opportunities without the financial draw.\
\pard\pardeftab720\sl300\partightenfactor0

\f1\b\fs30 \cf5 \cb1 \
\pard\pardeftab720\sl360\sa320\partightenfactor0
\cf3 \cb4 Provisioning\
\pard\pardeftab720\sa320\partightenfactor0

\f2\b0\fs32 \cf3 To add your app to the PYAPNS server, it must be\'a0
\f3\fs27\fsmilli13600 \cb7 provisioned
\f2\fs32 \cb4 \'a0at least once. Normally this is done once upon the start-up of your application, be it a web service, desktop application or whatever... It must be done at least once to the server you're connecting to. Multiple instances of PYAPNS will have to have their applications provisioned individually. To provision an application manually use the\'a0
\f3\fs27\fsmilli13600 \cb7 PYAPNS::Client#provision
\f2\fs32 \cb4 \'a0method.\
\pard\pardeftab720\sl380\partightenfactor0

\f3\fs27\fsmilli13600 \cf3 \cb6 require 'pyapns'\
client = PYAPNS::Client.configure\
client.provision :app_id => 'cf', :cert => '/home/ss/cert.pem', :env => 'sandbox', :timeout => 15\
\pard\pardeftab720\sa320\partightenfactor0

\f2\fs32 \cf3 \cb4 This basically says "add an app reference named 'cf' to the server and start a connection using the certification, and if it can't within 15 seconds, raise a\'a0
\f3\fs27\fsmilli13600 \cb7 PYAPNS::TimeoutException
\f2\fs32 \cb4 \
That's all it takes to get started. Of course, this can be done automatically by using PYAPNS::ClientConfiguration middleware.\'a0
\f3\fs27\fsmilli13600 \cb7 PYAPNS::Client
\f2\fs32 \cb4 \'a0is a singleton class that is configured using the class method\'a0
\f3\fs27\fsmilli13600 \cb7 PYAPNS::Client#configure
\f2\fs32 \cb4 . It is sensibly configured by default, but can be customized by specifying a hash See the docs on\'a0
\f3\fs27\fsmilli13600 \cb7 PYAPNS::ClientConfiguration
\f2\fs32 \cb4 \'a0for a list of available configuration parameters (some of these are important, and you can specify initial applications) to be configured by default.\
\pard\pardeftab720\sl300\partightenfactor0

\f1\b\fs30 \cf5 \cb1 \
\pard\pardeftab720\sl360\sa320\partightenfactor0
\cf3 \cb4 Sending Notifications\
\pard\pardeftab720\sa320\partightenfactor0

\f2\b0\fs32 \cf3 Once your client is configured, and application provisioned (again, these should be taken care of before you write notification code) you can begin sending notifications to users. If you're wondering how to acquire a notification token, you've come to the wrong place... I recommend using google. However, if you want to send hundreds of millions of notifications to users, here's how it's done, one at a time...\
The\'a0
\f3\fs27\fsmilli13600 \cb7 PYAPNS::Client#notify
\f2\fs32 \cb4 \'a0is a sort of polymorphic method which can notify any number of devices at a time. It's basic form is as follows:\
\pard\pardeftab720\sl380\partightenfactor0

\f3\fs27\fsmilli13600 \cf3 \cb6 client.notify 'cf', 'long ass app token', \{:aps=> \{:alert => 'hello?'\}\}\
\pard\pardeftab720\sa320\partightenfactor0

\f2\fs32 \cf3 \cb4 However, as stated before, it is sort of polymorphic:\
\pard\pardeftab720\sl380\partightenfactor0

\f3\fs27\fsmilli13600 \cf3 \cb6 client.notify 'cf', ['token', 'token2', 'token3'], [alert, alert2, alert3]\
\
client.notify :app_id => 'cf', :tokens => 'mah token', :notifications => alertHash\
\
client.notify 'cf', 'token', PYAPNS::Notification('hello tits!')\
\pard\pardeftab720\sa320\partightenfactor0

\f2\fs32 \cf3 \cb4 As you can see, the method accepts paralell arrays of tokens and notifications meaning any number of notifications can be sent at once. Hashes will be automatically converted to\'a0
\f3\fs27\fsmilli13600 \cb7 PYAPNS::Notification
\f2\fs32 \cb4 \'a0objects so they can be optimized for the wire (nil values removed, etc...), and you can pass\'a0
\f3\fs27\fsmilli13600 \cb7 PYAPNS::Notification
\f2\fs32 \cb4 \'a0objects directly if you wish.\
\pard\pardeftab720\sl300\partightenfactor0

\f1\b\fs30 \cf5 \cb1 \
\pard\pardeftab720\sl360\sa320\partightenfactor0
\cf3 \cb4 Retrieving Feedback\
\pard\pardeftab720\sa320\partightenfactor0

\f2\b0\fs32 \cf3 The APS service offers a feedback functionality that allows application servers to retrieve a list of device tokens it deems to be no longer in use, and the time it thinks they stopped being useful (the user uninstalled your app, better luck next time...) Sounds pretty straight forward, and it is. Apple recommends you do this at least once an hour. PYAPNS will return a list of 2-element lists with the date and the token:\
\pard\pardeftab720\sl380\partightenfactor0

\f3\fs27\fsmilli13600 \cf3 \cb6 feedbacks = client.feedback 'cf'\
\pard\pardeftab720\sl300\partightenfactor0

\f1\b\fs30 \cf5 \cb1 \
\pard\pardeftab720\sl360\sa320\partightenfactor0
\cf3 \cb4 Asynchronous Calls\
\pard\pardeftab720\sa320\partightenfactor0

\f2\b0\fs32 \cf3 PYAPNS::Client will, by default, perform no funny stuff and operate entirely within the calling thread. This means that certain applications may hang when, say, sending a notification, if only for a fraction of a second. Obviously not a desirable trait, all\'a0
\f3\fs27\fsmilli13600 \cb7 provision
\f2\fs32 \cb4 ,\'a0
\f3\fs27\fsmilli13600 \cb7 feedback
\f2\fs32 \cb4 \'a0and\'a0
\f3\fs27\fsmilli13600 \cb7 notify
\f2\fs32 \cb4 \'a0methods also take a block, which indicates to the method you want to call PYAPNS asynchronously, and it will be done so handily in another thread, calling back your block with a single argument when finished. Note that\'a0
\f3\fs27\fsmilli13600 \cb7 notify
\f2\fs32 \cb4 \'a0and\'a0
\f3\fs27\fsmilli13600 \cb7 provision
\f2\fs32 \cb4 \'a0return absolutely nothing (nil, for you rub--wait you are ruby developers!). It is probably wise to always use this form of operation so your calling thread is never blocked (especially important in UI-driven apps and asynchronous servers) Just pass a block to provision/notify/feedback like so:\
\pard\pardeftab720\sl380\partightenfactor0

\f3\fs27\fsmilli13600 \cf3 \cb6 PYAPNS::Client.instance.feedback do |feedbacks|\
  feedbacks.each \{ |f| trim_token f \}\
end\
\pard\pardeftab720\sl300\partightenfactor0

\f1\b\fs30 \cf5 \cb1 \
\pard\pardeftab720\sl360\sa320\partightenfactor0
\cf3 \cb4 PYAPNS::ClientConfiguration\
\pard\pardeftab720\sa320\partightenfactor0

\f2\b0\fs32 \cf3 A middleware class to make\'a0
\f3\fs27\fsmilli13600 \cb7 PYAPNS::Client
\f2\fs32 \cb4 \'a0easy to use in web contexts\
Automates configuration of the client in Rack environments using a simple confiuration middleware. To use\'a0
\f3\fs27\fsmilli13600 \cb7 PYAPNS::Client
\f2\fs32 \cb4 \'a0in Rack environments with the least code possible\'a0
\f3\fs27\fsmilli13600 \cb7 use PYAPNS::ClientConfiguration
\f2\fs32 \cb4 \'a0(no, really, in some cases, that's all you need!) middleware with an optional hash specifying the client variables. Options are as follows:\
\pard\pardeftab720\sl380\partightenfactor0

\f3\fs27\fsmilli13600 \cf3 \cb6  use PYAPNS::ClientConfiguration(\
      :host => 'http://localhost/' \
      :port => 7077,\
      :initial => [\{\
          :app_id => 'myapp',\
          :cert => '/home/myuser/apps/myapp/cert.pem',\
          :env => 'sandbox',\
          :timeout => 15\
 \}])\
\pard\pardeftab720\sa320\partightenfactor0

\f2\fs32 \cf3 \cb4 Where the configuration variables are defined:\
\pard\pardeftab720\sl380\partightenfactor0

\f3\fs27\fsmilli13600 \cf3 \cb6 :host     String      the host where the server can be found\
:port     Number      the port to which the client should connect\
:initial  Array       OPTIONAL - an array of INITIAL hashes\
\
INITIAL HASHES:\
\
:app_id   String      the id used to send messages with this certification\
                      can be a totally arbitrary value\
:cert     String      a path to the certification or the certification file\
                      as a string\
:env      String      the environment to connect to apple with, always\
                      either 'sandbox' or 'production'\
:timoeut  Number      The timeout for the server to use when connecting\
                      to the apple servers\
\pard\pardeftab720\sl300\partightenfactor0

\f1\b\fs30 \cf5 \cb1 \
\pard\pardeftab720\sl360\sa320\partightenfactor0
\cf3 \cb4 PYAPNS::Notification\
\pard\pardeftab720\sa320\partightenfactor0

\f2\b0\fs32 \cf3 An APNS Notification\
You can construct notification objects ahead of time by using this class. However unnecessary, it allows you to programmatically generate a Notification like so:\
\pard\pardeftab720\sl380\partightenfactor0

\f3\fs27\fsmilli13600 \cf3 \cb6 note = PYAPNS::Notification.new 'alert text', 9, 'flynn.caf', \{:extra => 'guid'\}\
\
-- or --\
note = PYAPNS::Notification.new 'alert text'\
\pard\pardeftab720\partightenfactor0

\f2\fs32 \cf3 \cb4 These can be passed to\'a0
\f3\fs27\fsmilli13600 \cb7 PYAPNS::Client#notify
\f2\fs32 \cb4 \'a0the same as hashes\
}