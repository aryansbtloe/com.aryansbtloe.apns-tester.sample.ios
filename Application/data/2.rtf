{\rtf1\ansi\ansicpg1252\cocoartf2512
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;\f1\fnil\fcharset0 GillSans;\f2\fnil\fcharset0 HelveticaNeue-Bold;
\f3\fswiss\fcharset0 Helvetica;\f4\fnil\fcharset0 HelveticaNeue-Italic;}
{\colortbl;\red255\green255\blue255;\red27\green31\blue34;\red255\green255\blue255;\red0\green0\blue233;
\red10\green77\blue204;\red244\green246\blue249;\red203\green35\blue57;\red6\green33\blue79;\red91\green40\blue180;
\red7\green68\blue184;\red87\green96\blue106;\red21\green23\blue26;}
{\*\expandedcolortbl;;\cssrgb\c14118\c16078\c18039;\cssrgb\c100000\c100000\c100000;\cssrgb\c0\c0\c93333;
\cssrgb\c1176\c40000\c83922;\cssrgb\c96471\c97255\c98039;\cssrgb\c84314\c22745\c28627;\cssrgb\c1176\c18431\c38431;\cssrgb\c43529\c25882\c75686;
\cssrgb\c0\c36078\c77255;\cssrgb\c41569\c45098\c49020;\cssrgb\c10588\c12157\c13725\c5098;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid201\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid3}
{\list\listtemplateid4\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid301\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid4}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}{\listoverride\listid4\listoverridecount0\ls4}}
\margl1440\margr1440\vieww9000\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl600\sa320\partightenfactor0

\f0\fs32 \cf2 \cb3 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\partightenfactor0

\f1\fs128 \cf4 \cb1 \ul \ulc4 apns2\
\pard\pardeftab720\sa320\partightenfactor0

\f0\fs32 \cf2 \cb3 \ulnone \
APNS/2 is a go package designed for simple, flexible and fast Apple Push Notifications on iOS, OSX and Safari using the new HTTP/2 Push provider API.\
\pard\pardeftab720\sl360\partightenfactor0

\f2\b\fs36 \cf5 \cb1 \
\pard\pardeftab720\sl440\sa320\partightenfactor0
\cf2 \cb3 Features\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls1\ilvl0
\f0\b0\fs32 \cf2 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Uses new Apple APNs HTTP/2 connection\cb1 \
\ls1\ilvl0\cb3 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Fast - See\'a0{\field{\*\fldinst{HYPERLINK "https://github.com/sideshow/apns2/wiki/APNS-HTTP-2-Push-Speed"}}{\fldrslt \cf5 notes on speed}}\cb1 \
\ls1\ilvl0\cb3 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Works with go 1.7 and later\cb1 \
\ls1\ilvl0\cb3 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Supports new Apple Token Based Authentication (JWT)\cb1 \
\ls1\ilvl0\cb3 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Supports new iOS 10 features such as Collapse IDs, Subtitles and Mutable Notifications\cb1 \
\ls1\ilvl0\cb3 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Supports persistent connections to APNs\cb1 \
\ls1\ilvl0\cb3 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Supports VoIP/PushKit notifications (iOS 8 and later)\cb1 \
\ls1\ilvl0\cb3 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Modular & easy to use\cb1 \
\ls1\ilvl0\cb3 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Tested and working in APNs production environment\cb1 \
\pard\pardeftab720\sl360\partightenfactor0

\f2\b\fs36 \cf5 \
\pard\pardeftab720\sl440\sa320\partightenfactor0
\cf2 \cb3 Install\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls2\ilvl0
\f0\b0\fs32 \cf2 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Make sure you have\'a0{\field{\*\fldinst{HYPERLINK "https://golang.org/doc/install"}}{\fldrslt \cf5 Go}}\'a0installed and have set your\'a0{\field{\*\fldinst{HYPERLINK "https://golang.org/doc/code.html#GOPATH"}}{\fldrslt \cf5 GOPATH}}.\cb1 \
\ls2\ilvl0\cb3 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Install apns2:\cb1 \
\pard\pardeftab720\sl380\partightenfactor0

\f3\fs27\fsmilli13600 \cf2 \cb6 go get -u github.com/sideshow/apns2\
\pard\pardeftab720\sa320\partightenfactor0

\f0\fs32 \cf2 \cb3 If you are running the test suite you will also need to install testify:\
\pard\pardeftab720\sl380\partightenfactor0

\f3\fs27\fsmilli13600 \cf2 \cb6 go get -u github.com/stretchr/testify\
\pard\pardeftab720\sl360\partightenfactor0

\f2\b\fs36 \cf5 \cb1 \
\pard\pardeftab720\sl440\sa320\partightenfactor0
\cf2 \cb3 Example\
\pard\pardeftab720\sl380\partightenfactor0

\f3\b0\fs27\fsmilli13600 \cf7 \cb6 package\cf2  main\
\
\cf7 import\cf2  (\
  \cf8 "log"\cf2 \
  \cf8 "fmt"\cf2 \
\
  \cf8 "github.com/sideshow/apns2"\cf2 \
  \cf8 "github.com/sideshow/apns2/certificate"\cf2 \
)\
\
\cf7 func\cf2  \cf9 main\cf2 () \{\
\
  cert, err \cf10 :=\cf2  certificate.\cf9 FromP12File\cf2 (\cf8 "../cert.p12"\cf2 , \cf8 ""\cf2 )\
  \cf7 if\cf2  err \cf10 !=\cf2  \cf10 nil\cf2  \{\
    log.\cf9 Fatal\cf2 (\cf8 "Cert Error:"\cf2 , err)\
  \}\
\
  notification \cf10 :=\cf2  \cf10 &\cf2 apns2.Notification\{\}\
  notification.\cf10 DeviceToken\cf2  \cf10 =\cf2  \cf8 "11aa01229f15f0f0c52029d8cf8cd0aeaf2365fe4cebc4af26cd6d76b7919ef7"\cf2 \
  notification.\cf10 Topic\cf2  \cf10 =\cf2  \cf8 "com.sideshow.Apns2"\cf2 \
  notification.\cf10 Payload\cf2  \cf10 =\cf2  []byte(\cf8 `\{"aps":\{"alert":"Hello!"\}\}`\cf2 ) \cf11 // See Payload section below\cf2 \
\
  \cf11 // If you want to test push notifications for builds running directly from XCode (Development), use\cf2 \
  \cf11 // client := apns2.NewClient(cert).Development()\cf2 \
  \cf11 // For apps published to the app store or installed as an ad-hoc distribution use Production()\cf2 \
\
  client \cf10 :=\cf2  apns2.\cf9 NewClient\cf2 (cert).\cf9 Production\cf2 ()  \
  res, err \cf10 :=\cf2  client.\cf9 Push\cf2 (notification)\
\
  \cf7 if\cf2  err \cf10 !=\cf2  \cf10 nil\cf2  \{\
    log.\cf9 Fatal\cf2 (\cf8 "Error:"\cf2 , err)\
  \}\
\
  fmt.\cf9 Printf\cf2 (\cf8 "%v %v %v\\n"\cf2 , res.\cf10 StatusCode\cf2 , res.\cf10 ApnsID\cf2 , res.\cf10 Reason\cf2 )\
\}\
\pard\pardeftab720\sl360\partightenfactor0

\f2\b\fs36 \cf5 \cb1 \
\pard\pardeftab720\sl440\sa320\partightenfactor0
\cf2 \cb3 JWT Token Example\
\pard\pardeftab720\sa320\partightenfactor0

\f0\b0\fs32 \cf2 Instead of using a\'a0
\f3\fs27\fsmilli13600 \cb12 .p12
\f0\fs32 \cb3 \'a0or\'a0
\f3\fs27\fsmilli13600 \cb12 .pem
\f0\fs32 \cb3 \'a0certificate as above, you can optionally use APNs JWT\'a0
\f4\i Provider Authentication Tokens
\f0\i0 . First you will need a signing key (
\f3\fs27\fsmilli13600 \cb12 .p8
\f0\fs32 \cb3 \'a0file), Key ID and Team ID\'a0{\field{\*\fldinst{HYPERLINK "http://help.apple.com/xcode/mac/current/#/dev54d690a66"}}{\fldrslt \cf5 from Apple}}. Once you have these details, you can create a new client:\
\pard\pardeftab720\sl380\partightenfactor0

\f3\fs27\fsmilli13600 \cf2 \cb6 authKey, err \cf10 :=\cf2  token.AuthKeyFromFile("..\cf10 /\cf2 AuthKey_XXX.p8")\
\pard\pardeftab720\sl380\partightenfactor0
\cf7 if\cf2  err \cf10 !=\cf2  \cf10 nil\cf2  \{\
  log.Fatal("token error:", err)\
\}\
\
token \cf10 :=\cf2  \cf10 &\cf2 token.Token\{\
  AuthKey: authKey,\
  \cf11 // KeyID from developer account (Certificates, Identifiers & Profiles -> Keys)\cf2 \
  KeyID:   "ABC123DEFG",\
  \cf11 // TeamID from developer account (View Account -> Membership)\cf2 \
  TeamID:  "DEF123GHIJ",\
\}\
\cf10 ...\cf2 \
\
client \cf10 :=\cf2  apns2.NewTokenClient(token)\
res, err \cf10 :=\cf2  client.Push(notification)\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls3\ilvl0
\f0\fs32 \cf2 \cb3 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
You can use one APNs signing key to authenticate tokens for multiple apps.\cb1 \
\ls3\ilvl0\cb3 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
A signing key works for both the development and production environments.\cb1 \
\ls3\ilvl0\cb3 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
A signing key doesn\'92t expire but can be revoked.\cb1 \
\pard\pardeftab720\sl360\partightenfactor0

\f2\b\fs36 \cf5 \
\pard\pardeftab720\sl440\sa320\partightenfactor0
\cf2 \cb3 Notification\
\pard\pardeftab720\sa320\partightenfactor0

\f0\b0\fs32 \cf2 At a minimum, a\'a0
\f4\i Notification
\f0\i0 \'a0needs a\'a0
\f4\i DeviceToken
\f0\i0 , a\'a0
\f4\i Topic
\f0\i0 \'a0and a\'a0
\f4\i Payload
\f0\i0 .\
\pard\pardeftab720\sl380\partightenfactor0

\f3\fs27\fsmilli13600 \cf2 \cb6 notification \cf10 :=\cf2  \cf10 &\cf2 apns2.Notification\{\
  DeviceToken: "\cf10 11\cf2 aa01229f15f0f0c52029d8cf8cd0aeaf2365fe4cebc4af26cd6d76b7919ef7",\
  Topic: "com.sideshow.Apns2",\
  Payload: []byte(\cf8 `\{"aps":\{"alert":"Hello!"\}\}`\cf2 ),\
\}\
\pard\pardeftab720\sa320\partightenfactor0

\f0\fs32 \cf2 \cb3 You can also set an optional\'a0
\f4\i ApnsID
\f0\i0 ,\'a0
\f4\i Expiration
\f0\i0 \'a0or\'a0
\f4\i Priority
\f0\i0 .\
\pard\pardeftab720\sl380\partightenfactor0

\f3\fs27\fsmilli13600 \cf2 \cb6 notification.ApnsID \cf10 =\cf2   "\cf10 40636\cf2 A2C\cf10 -\cf2 C093\cf10 -493E-936\cf2 A\cf10 -2\cf2 A4333C06DEA"\
notification.Expiration \cf10 =\cf2  time.Now()\
notification.Priority \cf10 =\cf2  apns2.PriorityLow\
\pard\pardeftab720\sl360\partightenfactor0

\f2\b\fs36 \cf5 \cb1 \
\pard\pardeftab720\sl440\sa320\partightenfactor0
\cf2 \cb3 Payload\
\pard\pardeftab720\sa320\partightenfactor0

\f0\b0\fs32 \cf2 You can use raw bytes for the\'a0
\f3\fs27\fsmilli13600 \cb12 notification.Payload
\f0\fs32 \cb3 \'a0as above, or you can use the payload builder package which makes it easy to construct APNs payloads.\
\pard\pardeftab720\sl380\partightenfactor0

\f3\fs27\fsmilli13600 \cf11 \cb6 // \{"aps":\{"alert":"hello","badge":1\},"key":"val"\}\cf2 \
\
payload \cf10 :=\cf2  payload.NewPayload().Alert("hello").Badge(\cf10 1\cf2 ).Custom("key", "val")\
\
notification.Payload \cf10 =\cf2  payload\
client.Push(notification)\
\pard\pardeftab720\sa320\partightenfactor0

\f0\fs32 \cf2 \cb3 Refer to the\'a0{\field{\*\fldinst{HYPERLINK "https://godoc.org/github.com/sideshow/apns2/payload"}}{\fldrslt \cf5 payload}}\'a0docs for more info.\
\pard\pardeftab720\sl360\partightenfactor0

\f2\b\fs36 \cf5 \cb1 \
\pard\pardeftab720\sl440\sa320\partightenfactor0
\cf2 \cb3 Response, Error handling\
\pard\pardeftab720\sa320\partightenfactor0

\f0\b0\fs32 \cf2 APNS/2 draws the distinction between a valid response from Apple indicating whether or not the\'a0
\f4\i Notification
\f0\i0 \'a0was sent or not, and an unrecoverable or unexpected\'a0
\f4\i Error
\f0\i0 ;\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls4\ilvl0\cf2 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
An\'a0
\f3\fs27\fsmilli13600 \cb12 Error
\f0\fs32 \cb3 \'a0is returned if a non-recoverable error occurs, i.e. if there is a problem with the underlying\'a0
\f4\i http.Client
\f0\i0 \'a0connection or\'a0
\f4\i Certificate
\f0\i0 , the payload was not sent, or a valid\'a0
\f4\i Response
\f0\i0 \'a0was not received.\cb1 \
\ls4\ilvl0\cb3 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
A\'a0
\f3\fs27\fsmilli13600 \cb12 Response
\f0\fs32 \cb3 \'a0is returned if the payload was successfully sent to Apple and a documented response was received. This struct will contain more information about whether or not the push notification succeeded, its\'a0
\f4\i apns-id
\f0\i0 \'a0and if applicable, more information around why it did not succeed.\cb1 \
\pard\pardeftab720\sa320\partightenfactor0
\cf2 \cb3 To check if a\'a0
\f3\fs27\fsmilli13600 \cb12 Notification
\f0\fs32 \cb3 \'a0was successfully sent;\
\pard\pardeftab720\sl380\partightenfactor0

\f3\fs27\fsmilli13600 \cf2 \cb6 res, err \cf10 :=\cf2  client.Push(notification)\
\pard\pardeftab720\sl380\partightenfactor0
\cf7 if\cf2  err \cf10 !=\cf2  \cf10 nil\cf2  \{\
  log.Println("There was an error", err)\
  \cf7 return\cf2 \
\}\
\
\cf7 if\cf2  res.Sent() \{\
  log.Println("Sent:", res.ApnsID)\
\} \cf7 else\cf2  \{\
  fmt.Printf("Not Sent: \cf10 %\cf2 v \cf10 %\cf2 v \cf10 %\cf2 v\\n", res.StatusCode, res.ApnsID, res.Reason)\
\}\
\pard\pardeftab720\sl360\partightenfactor0

\f2\b\fs36 \cf5 \cb1 \
\pard\pardeftab720\sl440\sa320\partightenfactor0
\cf2 \cb3 Context & Timeouts\
\pard\pardeftab720\sa320\partightenfactor0

\f0\b0\fs32 \cf2 For better control over request cancellations and timeouts APNS/2 supports contexts. Using a context can be helpful if you want to cancel all pushes when the parent process is cancelled, or need finer grained control over individual push timeouts. See the\'a0{\field{\*\fldinst{HYPERLINK "https://blog.golang.org/context"}}{\fldrslt \cf5 Google post}}\'a0for more information on contexts.\
\pard\pardeftab720\sl380\partightenfactor0

\f3\fs27\fsmilli13600 \cf2 \cb6 ctx, cancel \cf10 =\cf2  context.WithTimeout(context.Background(), \cf10 10\cf2  \cf10 *\cf2  time.Second)\
res, err \cf10 :=\cf2  client.PushWithContext(ctx, notification)\
\pard\pardeftab720\sl380\partightenfactor0
\cf7 defer\cf2  cancel()\
\pard\pardeftab720\sl360\partightenfactor0

\f2\b\fs36 \cf5 \cb1 \
\pard\pardeftab720\sl440\sa320\partightenfactor0
\cf2 \cb3 Speed & Performance\
\pard\pardeftab720\sa320\partightenfactor0

\f0\b0\fs32 \cf2 Also see the wiki page on\'a0{\field{\*\fldinst{HYPERLINK "https://github.com/sideshow/apns2/wiki/APNS-HTTP-2-Push-Speed"}}{\fldrslt \cf5 APNS HTTP 2 Push Speed}}.\
For best performance, you should hold on to an\'a0
\f3\fs27\fsmilli13600 \cb12 apns2.Client
\f0\fs32 \cb3 \'a0instance and not re-create it every push. The underlying TLS connection itself can take a few seconds to connect and negotiate, so if you are setting up an\'a0
\f3\fs27\fsmilli13600 \cb12 apns2.Client
\f0\fs32 \cb3 \'a0and tearing it down every push, then this will greatly affect performance. (Apple suggest keeping the connection open all the time).\
You should also limit the amount of\'a0
\f3\fs27\fsmilli13600 \cb12 apns2.Client
\f0\fs32 \cb3 \'a0instances. The underlying transport has a http connection pool itself, so a single client instance will be enough for most users (One instance can potentially do 4,000+ pushes per second). If you need more than this then one instance per CPU core is a good starting point.\
Speed is greatly affected by the location of your server and the quality of your network connection. If you're just testing locally, behind a proxy or if your server is outside USA then you're not going to get great performance. With a good server located in AWS, you should be able to get\'a0{\field{\*\fldinst{HYPERLINK "https://github.com/sideshow/apns2/wiki/APNS-HTTP-2-Push-Speed"}}{\fldrslt \cf5 decent throughput}}.\
\pard\pardeftab720\sl360\partightenfactor0

\f2\b\fs36 \cf5 \cb1 \
\pard\pardeftab720\sl440\sa320\partightenfactor0
\cf2 \cb3 Command line tool\
\pard\pardeftab720\sa320\partightenfactor0

\f0\b0\fs32 \cf2 APNS/2 has a command line tool that can be installed with\'a0
\f3\fs27\fsmilli13600 \cb12 go get github.com/sideshow/apns2/apns2
\f0\fs32 \cb3 . Usage:\
\pard\pardeftab720\sl380\partightenfactor0

\f3\fs27\fsmilli13600 \cf2 \cb6 apns2 --help\
usage: apns2 --certificate-path=CERTIFICATE-PATH --topic=TOPIC [<flags>]\
\
Listens to STDIN to send notifications and writes APNS response code and reason to STDOUT.\
\
The expected format is: <DeviceToken> <APNS Payload>\
Example: aff0c63d9eaa63ad161bafee732d5bc2c31f66d552054718ff19ce314371e5d0 \{"aps": \{"alert": "hi"\}\}\
Flags:\
      --help               Show context-sensitive help (also try --help-long and --help-man).\
  -c, --certificate-path=CERTIFICATE-PATH\
                           Path to certificate file.\
  -t, --topic=TOPIC        The topic of the remote notification, which is typically the bundle ID for your app\
  -m, --mode="production"  APNS server to send notifications to. `production` or `development`. Defaults to `production`\
      --version            Show application version.\
\pard\pardeftab720\sl360\partightenfactor0

\f2\b\fs36 \cf5 \cb1 \
\pard\pardeftab720\sl440\sa320\partightenfactor0
\cf2 \cb3 License\
\pard\pardeftab720\sa320\partightenfactor0

\f0\b0\fs32 \cf2 The MIT License (MIT)\
Copyright (c) 2016 Adam Jones\
Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\
The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\
\pard\pardeftab720\partightenfactor0
\cf2 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON INFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\
}